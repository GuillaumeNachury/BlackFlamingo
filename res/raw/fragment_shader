#extension GL_OES_EGL_image_external : require

// @author : Guillaume Nachury

precision mediump float;

uniform samplerExternalOES sTexture;
uniform float uScreenHeight;
uniform float uScreenWidth;
uniform float uHueTolerance;
uniform float uSaturation;
uniform float uValue;
uniform float uSelectedHue;
uniform float uNewHue;

varying vec2 vTextureCoord;

//---------------------
// 0 - 360 : red
// 60 : yellow
// 120 : green
// 180 : cyan
// 240 : blue
// 300 : magenta
//---------------------
float T = 10.0;



void trnTohsv(inout vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);
    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    c =  vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

void trnTorgb(inout vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    c = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void pixelTest(inout vec3 col)
{
	float step = (1.0/360.0);
	float y = step*120.0;
	
	float tol = step*uHueTolerance;
	
	if((col.r < y+tol && col.r > y-tol) && col.b > uValue && col.g > uSaturation){
		vec3 newHSV = vec3(uNewHue, col.g, col.b);
		trnTorgb(newHSV);
		col = newHSV;
	}
	else{
		trnTorgb(col);
	}
	
}

void main(){
	vec2 p = vTextureCoord;
	
	//DEBUG
	float limit = (1.0-p.y);
	
	
	vec3 col = texture2D(sTexture, vTextureCoord).rgb;
	
	
	if(p.x < limit){ //DEBUG
		trnTohsv(col);
		pixelTest(col);
	}
	else if(p.x == limit){
		col = vec3(0.0);
	} 
	
	gl_FragColor = vec4(col,1.0);
}

